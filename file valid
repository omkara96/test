import io
import re
import sys
import os
import csv
import pandas as pd

def _get_df_from_file(file_path: str, schema: list, sep: str, encoding: str):
    """
    Returns a pandas dataframe by reading a file from the local file system
    """
    try:
        df = pd.read_csv(file_path, names=schema, sep=sep, encoding=encoding)
        return df
    except Exception as e:
        print(f"Error reading file: {file_path}")
        print(e)
        return None

def _pk_check(df: pd.DataFrame, pk_cols: list):
    """
    Check primary key columns in the dataframe
    """
    if not set(pk_cols).issubset(df.columns):
        return False, "Either the primary key column(s) don't exist in the file or the file header has the incorrect delimiter."
    
    duplicated_df = df[df.duplicated(subset=pk_cols, keep=False)]
    if not duplicated_df.empty:
        return False, "Duplicate keys found in the file."
    
    return True, None

def _validate_delimiter(file_path: str, sep: str, encoding: str):
    """
    Validate the delimiter used in the file
    """
    try:
        with open(file_path, 'r', encoding=encoding) as file:
            dialect = csv.Sniffer().sniff(file.read(1024), delimiters=sep)
            file_delimiter = dialect.delimiter
        
        if file_delimiter == sep:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error validating delimiter for file: {file_path}")
        print(e)
        return False

def _is_valid(table: dict):
    """
    Check if the file is valid based on the specified parameters
    """
    file_name = table.get("name")
    file_path = table.get("path") + file_name
    schema = table.get("schema")
    sep = table.get("sep")
    pk_cols = table.get("key_columns")
    encoding = table.get("encoding")
    
    if not file_path.endswith('.csv'):
        return False, "Invalid file format"
    
    try:
        df = _get_df_from_file(file_path, schema, sep, encoding)
        if df is None:
            return False, f"Error reading file: {file_path}"
        
        if not _validate_delimiter(file_path, sep, encoding):
            return False, "Incorrect file delimiter"
        
        is_valid, message = _pk_check(df, pk_cols)
        if not is_valid:
            return False, message
        
        return True, "All set to go"
    except Exception as e:
        return False, str(e)

def validator(dataset, tables):
    """
    Function to validate files
    """
    for table in tables:
        is_valid, message = _is_valid(table)
        if not is_valid:
            print(f"Validation failed for {table['name']}")
            print(f"Error: {message}")
        else:
            print(f"Validation passed for {table['name']}")

"""
Main program
"""
if __name__ == "__main__":
    parameters = {
        "dataset": "Dummy_data",
        "tables": [
            {
                "name": "l800_001_ins_pharm_rel_snapshot_pf",
                "path": "Inbound/opus_800/JP/SourceFiles/",
                "file_regex": "YOUR_FILE_REGEX",
                "sep": "\t",
                "key_columns": ["pharm_code", "prod_group_code", "ins_code", "effect_start_date"],
                "encoding": "utf-8"
            }
        ]
    }

    dataset = parameters["dataset"]
    tables = parameters["tables"]

    validator(dataset, tables)